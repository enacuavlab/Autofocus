/**Package grouping all classes used to filter data*/
package filtre;

import java.util.logging.Logger;

import javax.swing.SwingUtilities;

import common.TypeCalibration;

import data.IVecteur;
import data.Vecteur;
import ellipsoide.DrawSphere;

public class FilterSphere extends Filter {

	private static Logger logger = Logger.getLogger(FilterSphere.class
			.getName());

	/**
	 * Data of the sphere, max and min of each axis center, radius and the
	 * sphere
	 */
	private DrawSphere drawSphere;

	/**
	 * Creates a filter who uses the plot given as an argument to plot in a two
	 * dimensional graph (simple orthogonal projection on xy)
	 * 
	 * @param windowSize
	 * @param type
	 */
	public FilterSphere(DrawSphere p_drawSphere, int windowSize,
			TypeCalibration type) {
		super(windowSize, type);
		this.drawSphere = p_drawSphere;
	}

	/**
	 * Add the vector given in argument to the filter and update the sphere with
	 * new radius and center
	 * 
	 * @param v
	 *            vector to add
	 */
	@Override
	public void add(final IVecteur<Double> v) {
		super.add(v);
		final Vecteur a[] = new Vecteur[windowSize];
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				Vecteur d = window.toArray(a)[0];
				logger.info("FilterSphere add d=" + d.getX() + " " + d.getY()
						+ " " + d.getZ());
				drawSphere.update(rayon, center, window.toArray(a)[0], v);
			}
		});
	}

}
