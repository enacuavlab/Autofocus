/**
 * Package IHM contents the interface of our application
 */
package ihm;

import imu.IMU;

import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;

import calibrate.CalibrateSystem;
import calibrate.PrintLog;

import common.TypeCalibration;

import data.Data;

/**
 * Show the result of the calibration in a JDialog
 * 
 * @author Guillaume
 * 
 */
public class Result extends JDialog {

	private static Logger logger = Logger.getLogger(Result.class.getName());

	private static int NB_LIGNES_MIN = 2000;

	/**
	 * Used to command for the listeners
	 * 
	 */
	private Data data;
	private TypeCalibration type = TypeCalibration.MAGNETOMETER;
	private PrintLog log;
	private int idDrone;

	private JTextArea textPaneResults;

	/**
	 * Builder
	 * 
	 * @param title
	 *            title of the JDialog
	 * @param modal
	 * @param imu
	 *            the imu
	 */
	public Result(String title, boolean modal, final PrintLog log, final IMU imu) {
		super();
		this.log = log;
		this.setTitle("Results");
		// The size of the JDialog
		this.setBounds(100, 100, 400, 300);
		this.setLocationRelativeTo(null);
		this.setResizable(true);
		this.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);

		GridBagLayout gridBagLayout = new GridBagLayout();
		gridBagLayout.rowHeights = new int[] { 10, 140, 20 };
		gridBagLayout.columnWeights = new double[] { 1.0 };
		gridBagLayout.rowWeights = new double[] { 1.0, 0.0, 1.0 };
		getContentPane().setLayout(gridBagLayout);

		JLabel lblNewLabel = new JLabel("Résultats de la calibration");
		GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
		gbc_lblNewLabel.fill = GridBagConstraints.VERTICAL;
		gbc_lblNewLabel.insets = new Insets(0, 0, 5, 0);
		gbc_lblNewLabel.gridx = 0;
		gbc_lblNewLabel.gridy = 0;
		getContentPane().add(lblNewLabel, gbc_lblNewLabel);

		textPaneResults = new JTextArea();
		textPaneResults.setEditable(false);
		// pour permettre le copier/coller
		textPaneResults.setEnabled(true);
		GridBagConstraints gbc_textPane = new GridBagConstraints();
		gbc_textPane.insets = new Insets(0, 0, 5, 0);
		gbc_textPane.fill = GridBagConstraints.BOTH;
		gbc_textPane.gridx = 0;
		gbc_textPane.gridy = 1;
		getContentPane().add(textPaneResults, gbc_textPane);

		JPanel panel = new JPanel();
		GridBagConstraints gbc_panel = new GridBagConstraints();
		gbc_panel.gridx = 0;
		gbc_panel.gridy = 4;
		getContentPane().add(panel, gbc_panel);
		panel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 1));

		JButton btnRetour = new JButton("Retour");
		panel.add(btnRetour);

		this.setVisible(false);

		btnRetour.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setVisible(false);
				imu.ListenRaw(data, type, log, idDrone);
			}
		});

	}

	public void getCalib() {
		this.setVisible(true);

		FileInputStream input;
		try {
			// Loading properties from file
			input = new FileInputStream("config.properties");
			Properties prop = new Properties();
			prop.load(input);
			String calibrationData = prop
					.getProperty("autofocus_calibration_data");
			String paparazziScriptCalibration = prop
					.getProperty("paparazzi_script_calibration");

			if (log.dataSize() > NB_LIGNES_MIN) {
				textPaneResults.setText("calcul en cours...");

				log.print(calibrationData);

				new CalibrateSystem(type, paparazziScriptCalibration,
						calibrationData, textPaneResults).run();
			} else {
				textPaneResults.setText("quantité de données insuffisante");
				logger.info("quantité de données insuffisante pour pouvoir calculer une calibration : "
						+ log.dataSize() + "/" + NB_LIGNES_MIN);
			}
		} catch (FileNotFoundException e) {
			logger.warning(e.getMessage());
		} catch (IOException e) {
			logger.warning(e.getMessage());
		}
	}

	/** set the data in order to be able to begin the raw collect again */
	public void setData(Data d) {
		this.data = d;
	}

	/** set the type of the current calibration */
	public void setType(TypeCalibration t) {
		this.type = t;
	}

	public void setId(int id) {
		this.idDrone = id;
	}

	public static void main(String[] args) {
		new Result("test", true, new PrintLog(), new IMU()).setVisible(true);
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = 6008983430604669181L;
}
