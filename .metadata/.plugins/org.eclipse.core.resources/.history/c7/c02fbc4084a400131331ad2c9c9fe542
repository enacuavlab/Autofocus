/**Package grouping all classes used to filter data*/
package filtre;

import java.util.logging.Logger;

import common.SlidingWindow;
import common.TypeCalibration;

import data.IVector;
import data.Vector;

/**
 * Mother class of all filter use to discriminates vector according to their
 * noise factor
 */

public class Filter {

	private static Logger logger = Logger.getLogger(Filter.class.getName());

	/**
	 * type de la calibration
	 * 
	 */
	private TypeCalibration type;
	/**
	 * Maximum and minimum on each directions used to update the sphere
	 * 
	 */
	private int maxX = 0;
	private int minX = 0;
	private int maxY = 0;
	private int minY = 0;
	private int maxZ = 0;
	private int minZ = 0;
	protected int rayon = 0;
	/** The center of the sphere */
	protected Vector center = new Vector(0, 0, 0);
	protected int nbCorrectVect = 0;
	/**
	 * The number of vector discarded used to reinitialize the progress bar
	 */
	protected int nbWrongVect = 0;

	/** The size of the sliding window of the filter (default 40) */
	protected int windowSize;

	/**
	 * The sliding window of the filter. Contains the last <windowSize> messages
	 */
	protected SlidingWindow<IVector<Double>> messageStack;

	/** The noise threshold of the filter */
	// private double noiseThreshold;

	// private DescriptiveStatistics descStatX;
	// private DescriptiveStatistics descStatY;
	// private DescriptiveStatistics descStatZ;

	/**
	 * Creates a filter with fixed window size which filter the type of
	 * calibration given in parameter
	 * 
	 * @param windowSize
	 * @param t
	 */
	public Filter(int windowSize, TypeCalibration t) {
		// this.noiseThreshold = 100; // start value
		this.type = t;
		this.windowSize = windowSize;
		messageStack = new SlidingWindow<IVector<Double>>(windowSize);

		// descStatX = new DescriptiveStatistics(windowSize);
		// descStatY = new DescriptiveStatistics(windowSize);
		// descStatZ = new DescriptiveStatistics(windowSize);
	}

	/**
	 * add the vector building the correct window if not already built and
	 * updates the window
	 * 
	 * @param v
	 */
	public void add(final IVector<Double> v) {
		messageStack.add(v);

		// // Ajout de la valeur X
		// descStatX.addValue(v.getX());
		// // Ajout de la valeur Y
		// descStatY.addValue(v.getY());
		// // Ajout de la valeur Z
		// descStatZ.addValue(v.getZ());
		//
		// double maxAcceptedX = descStatX.getMean()
		// + descStatX.getStandardDeviation();
		// double maxAcceptedY = descStatY.getMean()
		// + descStatY.getStandardDeviation();
		// double maxAcceptedZ = descStatZ.getMean()
		// + descStatZ.getStandardDeviation();

		for (IVector<Double> vec : messageStack) {
			boolean validity = true;
			// Si le vecteur dépasse la zone autorisée sur au moins 1 axe, il
			// est non valide
			// if (vec.getX() > maxAcceptedX || vec.getY() > maxAcceptedY
			// || vec.getZ() > maxAcceptedZ) {
			// validity = false;
			// }
			vec.setCorrectness(validity);
		}

		if (v.isCorrect()) {
			nbCorrectVect++;
			if (v.getX() > maxX) {
				maxX = (int) v.getX();
			} else if (v.getX() < minX) {
				minX = (int) v.getX();
			}
			if (v.getY() > maxY) {
				maxY = (int) v.getY();
			} else if (v.getY() < minY) {
				minY = (int) v.getY();
			}
			if (v.getZ() > maxZ) {
				maxZ = (int) v.getZ();
			} else if (v.getZ() < minZ) {
				minZ = (int) v.getZ();
			}
		} else
			nbWrongVect++;

		rayon = (max(maxX, maxY, maxZ) + max(abs(minX), abs(minY), abs(minZ))) / 2;
		center = new Vector((maxX + minX) / 2, (maxY + minY) / 2,
				(maxZ + minZ) / 2);
		// if (TypeCalibration.ACCELEROMETER.equals(this.type)) {
		// noiseThreshold = rayon / 100 * 2;
		// } else {
		// noiseThreshold = rayon / 100 * 5;
		// }
	}

	private int abs(int m) {
		return Math.abs(m);
	}

	private int max(int x, int y, int z) {
		return Math.max(x, Math.max(y, z));
	}
}
