package ihm;

import imu.Aircraft;
import imu.IMU;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTextPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;

import net.miginfocom.swing.MigLayout;

import org.eclipse.wb.swing.FocusTraversalOnArray;

import testData.Sender;
import calibrate.PrintLog;

import common.TypeCalibration;

import data.Data;
import ellipsoide.AffichAccel;
import ellipsoide.AffichSphere;
import ellipsoide.Sphere;
import filtre.FilterAccel;
import filtre.FilterSphere;

/**
 * Responsible of all display tasks except the display of sphere or magnetometer
 * display
 * 
 * @author alinoe
 * 
 */
public class Shell2 {

	/**
	 * IMU object to handle the other part of the control
	 * 
	 */
	private IMU imu;

	private JFrame frmCalibrate;

	private TypeCalibration type;

	private PrintLog log = new PrintLog();

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		try {
			UIManager
					.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
		} catch (Throwable e) {
			e.printStackTrace();
		}
		try {
			Shell2 window = new Shell2();
			window.frmCalibrate.setVisible(true);

			// TODO : supprimer (sert uniquement aux tests)
			Sender s = new Sender(
					"/home/deltadrone3/development/autofocus/calibration/test/13_04_03__13_49_35_droneId_5.data");
			s.sendRawMessage();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Create the application.
	 */
	public Shell2() {
		startImu();
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frmCalibrate = new JFrame();
		frmCalibrate.setFont(new Font("Arial", Font.PLAIN, 12));
		frmCalibrate.setTitle("Calibrate");
		frmCalibrate.setBounds(100, 100, 675, 550);
		frmCalibrate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmCalibrate.getContentPane().setLayout(new BorderLayout(0, 0));

		JPanel menuSide = new JPanel();
		frmCalibrate.getContentPane().add(menuSide, BorderLayout.WEST);
		menuSide.setBorder(new LineBorder(Color.GRAY));
		menuSide.setLayout(new MigLayout("", "[183px,grow 230]",
				"[41px][46px][46px][41px][46px][46px][][][][][][]"));

		JTextPane txtpnChooseAMode = new JTextPane();
		txtpnChooseAMode.setAlignmentY(Component.TOP_ALIGNMENT);
		txtpnChooseAMode.setAlignmentX(Component.LEFT_ALIGNMENT);
		txtpnChooseAMode.setEditable(false);
		txtpnChooseAMode.setBackground(UIManager.getColor("Button.light"));
		txtpnChooseAMode.setFont(new Font("Tahoma", Font.PLAIN, 14));
		txtpnChooseAMode.setText("Choose a mode of calibration");
		menuSide.add(txtpnChooseAMode, "cell 0 0,grow");

		final JButton btnNewButton_1 = new JButton("Accelerometers");

		btnNewButton_1.setEnabled(false);
		menuSide.add(btnNewButton_1, "cell 0 1,grow");

		final JButton btnNewButton = new JButton("Magnetometers");
		menuSide.add(btnNewButton, "cell 0 2,grow");
		btnNewButton.setEnabled(false);

		final JButton btnResults = new JButton("Results");
		btnResults.setVisible(true);
		btnResults.setEnabled(false);
		menuSide.add(btnResults, "cell 0 4,grow");

		final JButton btnHome = new JButton("Home");
		btnHome.setVisible(true);
		btnHome.setEnabled(false);
		menuSide.add(btnHome, "cell 0 5,grow");

		JPanel presentIcon = new JPanel();
		frmCalibrate.getContentPane().add(presentIcon, BorderLayout.NORTH);
		presentIcon.setBorder(new LineBorder(Color.GRAY));

		final JPanel panel_2 = new JPanel();
		panel_2.setBackground(new Color(255, 0, 0));

		JTextPane txtpnUavsPresent = new JTextPane();
		txtpnUavsPresent.setEditable(false);
		txtpnUavsPresent.setBackground(SystemColor.windowBorder);
		txtpnUavsPresent.setText("UAV's presence");

		final JPanel panel_1 = new JPanel();
		panel_1.setBackground(Color.RED);

		JTextPane txtpnCorrectTelemetryMode = new JTextPane();
		txtpnCorrectTelemetryMode.setText("Correct telemetry mode");

		final JLabel panel_3 = new JLabel();
		panel_3.setVisible(false);

		final JTextPane textPane = new JTextPane();
		textPane.setText("Try to obtain this image");
		textPane.setVisible(false);

		GroupLayout gl_presentIcon = new GroupLayout(presentIcon);
		gl_presentIcon.setHorizontalGroup(gl_presentIcon.createParallelGroup(
				Alignment.LEADING).addGroup(
				gl_presentIcon
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(panel_2, GroupLayout.PREFERRED_SIZE, 24,
								GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(txtpnUavsPresent,
								GroupLayout.PREFERRED_SIZE,
								GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addGap(18)
						.addComponent(panel_1, GroupLayout.PREFERRED_SIZE, 25,
								GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(txtpnCorrectTelemetryMode,
								GroupLayout.PREFERRED_SIZE,
								GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(textPane, GroupLayout.PREFERRED_SIZE,
								GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addGap(18)
						.addComponent(panel_3, GroupLayout.PREFERRED_SIZE, 90,
								GroupLayout.PREFERRED_SIZE).addGap(62)));
		gl_presentIcon
				.setVerticalGroup(gl_presentIcon
						.createParallelGroup(Alignment.LEADING)
						.addGroup(
								gl_presentIcon
										.createSequentialGroup()
										.addGap(14)
										.addGroup(
												gl_presentIcon
														.createParallelGroup(
																Alignment.LEADING)
														.addComponent(
																panel_3,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addGroup(
																gl_presentIcon
																		.createSequentialGroup()
																		.addGroup(
																				gl_presentIcon
																						.createParallelGroup(
																								Alignment.TRAILING)
																						.addComponent(
																								textPane,
																								Alignment.LEADING,
																								GroupLayout.PREFERRED_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.PREFERRED_SIZE)
																						.addGroup(
																								Alignment.LEADING,
																								gl_presentIcon
																										.createParallelGroup(
																												Alignment.LEADING,
																												false)
																										.addComponent(
																												txtpnCorrectTelemetryMode,
																												GroupLayout.PREFERRED_SIZE,
																												GroupLayout.DEFAULT_SIZE,
																												GroupLayout.PREFERRED_SIZE)
																										.addComponent(
																												panel_2,
																												GroupLayout.DEFAULT_SIZE,
																												GroupLayout.DEFAULT_SIZE,
																												Short.MAX_VALUE)
																										.addComponent(
																												txtpnUavsPresent,
																												GroupLayout.PREFERRED_SIZE,
																												GroupLayout.DEFAULT_SIZE,
																												GroupLayout.PREFERRED_SIZE)
																										.addComponent(
																												panel_1,
																												GroupLayout.DEFAULT_SIZE,
																												GroupLayout.DEFAULT_SIZE,
																												Short.MAX_VALUE)))
																		.addContainerGap()))));
		presentIcon.setLayout(gl_presentIcon);

		final JPanel panel = new JPanel();
		frmCalibrate.getContentPane().add(panel, BorderLayout.CENTER);
		panel.setBorder(new LineBorder(Color.GRAY));
		panel.setLayout(new CardLayout(0, 0));

		JPanel welcome = new JPanel();
		panel.add(welcome, "welcome");
		welcome.setLayout(new MigLayout("",
				"[100px,grow 200][276px,grow 400][100px,grow 200]",
				"[46px][][41px][46px][][41px][46px]"));

		JSeparator separator = new JSeparator();
		welcome.add(separator, "flowx,cell 0 0,alignx left,aligny top");

		JTextPane txtpnFillTheField = new JTextPane();
		welcome.add(txtpnFillTheField, "cell 1 0");
		txtpnFillTheField.setEditable(false);
		txtpnFillTheField.setFont(new Font("Tahoma", Font.PLAIN, 14));
		txtpnFillTheField.setBackground(UIManager.getColor("Button.light"));
		txtpnFillTheField
				.setText("Fill the fileds according to the UAV you want to calibrate properties");

		JLabel lblNewLabel = new JLabel("Name of the UAV");
		welcome.add(lblNewLabel, "cell 1 2,grow");
		lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);

		final JComboBox<Aircraft> comboBox = new JComboBox<Aircraft>();
		welcome.add(comboBox, "cell 1 3,grow");

		JLabel lblChooseModeSending = new JLabel("Choose mode sending RAW data");
		lblChooseModeSending.setHorizontalAlignment(SwingConstants.CENTER);
		welcome.add(lblChooseModeSending, "cell 1 5,grow");

		final JComboBox<String> comboBox_1 = new JComboBox<String>();
		welcome.add(comboBox_1, "cell 1 6,grow");

		// Listeners for all panels

		imu.addIMUListener(new IMUAdaptater() {

			public void aircraftExited(final Aircraft ac) {
				new Thread(new Runnable() {
					public void run() {
						SwingUtilities.invokeLater(new Runnable() {
							public void run() {
								try {
									if (comboBox.getSelectedItem().equals(ac)) {

										panel_2.setBackground(new Color(255, 0,
												0));
										btnNewButton.setEnabled(false);
										btnNewButton_1.setEnabled(false);
									}
								} catch (Exception e) {
									System.out.println("comboBox AC vide");
									panel_2.setBackground(new Color(255, 0, 0));
								}
							}
						});
					}
				}).run();
			}

			public void aircraftConnected(final Aircraft ac) {
				new Thread(new Runnable() {
					public void run() {
						SwingUtilities.invokeLater(new Runnable() {
							public void run() {
								try {
									if (comboBox.getSelectedItem().equals(ac)) {
										panel_2.setBackground(new Color(0, 255,
												0));
										if (ac.getIsRawData()) {
											panel_1.setBackground(Color.GREEN);
											btnNewButton.setEnabled(true);
											btnNewButton_1.setEnabled(true);
										}
									}
								} catch (Exception e) {
									System.out.println("comboBox AC vide");
								}
							}
						});
					}
				}).run();
			}

			public void aircraftRawOn(final Aircraft ac) {
				new Thread(new Runnable() {
					public void run() {
						SwingUtilities.invokeLater(new Runnable() {
							public void run() {
								try {
									if (comboBox.getSelectedItem().equals(ac)) {
										panel_1.setBackground(new Color(0, 255,
												0));

									}
								} catch (Exception e) {
									System.out.println("comboBox AC vide");
								}
							}
						});
					}
				}).run();
			}

			public void aircraftRawOff(final Aircraft ac) {
				new Thread(new Runnable() {
					public void run() {
						SwingUtilities.invokeLater(new Runnable() {
							public void run() {
								try {
									if (comboBox.getSelectedItem().equals(ac)) {
										panel_1.setBackground(new Color(255, 0,
												0));
									}
								} catch (Exception e) {
									System.out.println("comboBox AC vide");
								}
							}
						});
					}
				}).run();
			}
		});

		// Listeners for welcome

		imu.addIMUListener(new IMUAdaptater() {
			public void aircraftConnected(final Aircraft ac) {
				new Thread(new Runnable() {
					public void run() {
						SwingUtilities.invokeLater(new Runnable() {
							public void run() {
								comboBox.addItem(ac);
								if (ac.equals(comboBox.getSelectedItem())) {
									try {
										panel_2.setBackground(Color.GREEN);
										Thread.sleep(20);
										comboBox_1
												.setModel(new DefaultComboBoxModel<String>(
														(ac.getModes()
																.toArray(new String[1]))));
									} catch (Exception e) {
										System.out
												.println("Failure in getting modes");
										e.printStackTrace();
									}
								}
							}
						});
					}
				}).run();
			}

			public void aircraftRawOn(final Aircraft ac) {
				new Thread(new Runnable() {
					public void run() {
						SwingUtilities.invokeLater(new Runnable() {
							public void run() {
								try {
									if (comboBox.getSelectedItem().equals(ac)) {
										btnNewButton.setEnabled(true);
										btnNewButton_1.setEnabled(true);
									}
								} catch (Exception e) {
									System.out.println("comboBox AC vide");
								}
							}
						});
					}
				}).run();
			}

			public void aircraftRawOff(final Aircraft ac) {
				new Thread(new Runnable() {
					public void run() {
						SwingUtilities.invokeLater(new Runnable() {
							public void run() {
								try {
									if (comboBox.getSelectedItem().equals(ac)) {
										btnNewButton.setEnabled(false);
										btnNewButton_1.setEnabled(false);

									}
								} catch (Exception e) {
									System.out.println("comboBox AC vide");
								}
							}
						});
					}
				}).run();
			}

			public void aircraftExited(final Aircraft ac) {
				new Thread(new Runnable() {
					public void run() {
						SwingUtilities.invokeLater(new Runnable() {
							public void run() {
								if (ac.equals(comboBox.getSelectedItem())) {
									comboBox_1
											.setModel(new DefaultComboBoxModel<String>());
								}
								comboBox.removeItem(ac);
							}
						});
					}
				}).run();
			}

			public void aircraftModChanged(final Aircraft ac) {
				try {
					if (comboBox.getSelectedItem().equals(ac)) {
						new Thread(new Runnable() {
							public void run() {
								SwingUtilities.invokeLater(new Runnable() {
									public void run() {
										comboBox_1.setSelectedIndex(ac
												.getMode());
									}
								});
							}
						}).run();
					}
				} catch (Exception e) {
					System.out.println("comboBox mode vide");
					new Thread(new Runnable() {
						public void run() {
							SwingUtilities.invokeLater(new Runnable() {
								public void run() {
									comboBox_1
											.setModel(new DefaultComboBoxModel<String>(
													((Aircraft) comboBox
															.getSelectedItem())
															.getModes()
															.toArray(
																	new String[1])));
								}
							});
						}
					}).run();
				}
			}
		});

		comboBox.addItemListener(new ItemListener() {
			public void itemStateChanged(final ItemEvent arg0) {
				// System.out.println("selected");
				if (arg0.getStateChange() == ItemEvent.SELECTED) {
					try {
						new Thread(new Runnable() {
							public void run() {
								SwingUtilities.invokeLater(new Runnable() {
									public void run() {
										panel_2.setBackground(Color.GREEN);
										try {
											Thread.sleep(20);
										} catch (Exception e) {
											e.printStackTrace();
										}
										comboBox_1
												.setModel(new DefaultComboBoxModel<String>(
														((Aircraft) arg0
																.getItem())
																.getModes()
																.toArray(
																		new String[1])));
										if (((Aircraft) arg0.getItem())
												.getIsRawData()) {
											panel_1.setBackground(Color.GREEN);
											btnNewButton.setEnabled(true);
											btnNewButton_1.setEnabled(true);
										} else {
											panel_1.setBackground(Color.RED);
											btnNewButton.setEnabled(false);
											btnNewButton_1.setEnabled(false);
										}
									}
								});
							}
						}).run();
					} catch (Exception e) {
						System.out.println("Failure downcasting to aircraft");
						e.printStackTrace();
					}
				}
			}
		});

		comboBox_1.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent arg0) {
				if (arg0.getStateChange() == ItemEvent.SELECTED) {
					try {
						imu.changeAcMode(comboBox_1.getSelectedIndex(),
								(Aircraft) comboBox.getSelectedItem());
					} catch (Exception e) {
						System.out
								.println("Incorrect mode or mode comboBox empty");
					}
				}
			}
		});

		// start the discovering of all connected aircraft
		imu.listenAllAc();

		final Sphere sphere = new Sphere(7, 7, 100);
		final AffichSphere magneto = new AffichSphere(sphere);

		final Result results = new Result("Results", true, log, imu);

		btnResults.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				imu.stopListenRaw(type, log,
						((Aircraft) comboBox.getSelectedItem()).getId());
				results.getCalib();
			}
		});

		final AffichSphere accelS = new AffichSphere(sphere);
		sphere.setDisplay(accelS);
		final AffichAccel accelero = new AffichAccel(sphere);

		panel.add("accel", accelero);
		panel.add("mag", magneto);

		frmCalibrate.setFocusTraversalPolicy(new FocusTraversalOnArray(
				new Component[] { frmCalibrate.getContentPane(), menuSide,
						txtpnChooseAMode, btnNewButton_1, btnNewButton,
						presentIcon, panel_2, txtpnUavsPresent, panel, welcome,
						separator, txtpnFillTheField, lblNewLabel, comboBox,
						lblChooseModeSending, comboBox_1, magneto, accelero }));

		// Listeners on button to switch to calibration
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				new Thread(new Runnable() {
					public void run() {
						SwingUtilities.invokeLater(new Runnable() {
							public void run() {
								type = TypeCalibration.MAGNETOMETER;
								ImageIcon icon = new ImageIcon(this.getClass()
										.getResource("sphereMag.png"));
								icon.setImage(icon.getImage()
										.getScaledInstance(90, 50,
												Image.SCALE_SMOOTH));
								panel_3.setIcon(icon);
								FilterSphere filtre = new FilterSphere(sphere,
										40, type);
								Data data = new Data(filtre, type);
								imu.ListenRaw(data, type, log,
										((Aircraft) comboBox.getSelectedItem())
												.getId());
								imu.stopListenAllId((Aircraft) comboBox
										.getSelectedItem());
								results.setData(data);
								results.setType(type);
								results.setId(((Aircraft) comboBox
										.getSelectedItem()).getId());
								sphere.setDisplay(magneto);
								((CardLayout) panel.getLayout()).show(panel,
										"mag");
								btnNewButton.setEnabled(false);
								btnNewButton_1.setEnabled(false);
								btnResults.setEnabled(true);
								btnHome.setEnabled(true);
								panel_3.setVisible(true);
								textPane.setVisible(true);
							}
						});
					}
				}).start();
			}
		});

		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				type = TypeCalibration.ACCELEROMETER;
				new Thread(new Runnable() {
					public void run() {
						SwingUtilities.invokeLater(new Runnable() {
							public void run() {
								ImageIcon icon = new ImageIcon(this.getClass()
										.getResource("sphereAccel.png"));
								icon.setImage(icon.getImage()
										.getScaledInstance(90, 50,
												Image.SCALE_SMOOTH));
								panel_3.setIcon(icon);
								FilterAccel filtre = new FilterAccel(100, type,
										200, 40, accelero);
								Data data = new Data(filtre, type);
								imu.ListenRaw(data, type, log,
										((Aircraft) comboBox.getSelectedItem())
												.getId());
								imu.stopListenAllId((Aircraft) comboBox
										.getSelectedItem());
								results.setData(data);
								results.setType(type);
								results.setId(((Aircraft) comboBox
										.getSelectedItem()).getId());
								sphere.setDisplay(accelS);
								((CardLayout) panel.getLayout()).show(panel,
										"accel");
								btnNewButton.setEnabled(false);
								btnNewButton_1.setEnabled(false);
								btnResults.setEnabled(true);
								btnHome.setEnabled(true);
								panel_3.setVisible(true);
								textPane.setVisible(true);
							}
						});
					}
				}).start();
			}
		});

		btnHome.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				imu.stopListenRaw(TypeCalibration.MAGNETOMETER, log,
						((Aircraft) comboBox.getSelectedItem()).getId());
				imu.stopListenRaw(TypeCalibration.ACCELEROMETER, log,
						((Aircraft) comboBox.getSelectedItem()).getId());
				imu.stopListenAllId();
				comboBox.removeAllItems();
				imu.listenAllAc();
				new Thread(new Runnable() {
					public void run() {
						SwingUtilities.invokeLater(new Runnable() {
							public void run() {
								btnNewButton.setEnabled(false);
								btnNewButton_1.setEnabled(false);
								btnResults.setEnabled(false);
								btnHome.setEnabled(false);
								panel_3.setVisible(false);
								textPane.setVisible(false);
								sphere.clean();
								((CardLayout) panel.getLayout()).show(panel,
										"welcome");
							}
						});
					}
				}).run();
			}
		});

	}

	/**
	 * Start the IMU, physical control part (outside GUI)
	 */
	private void startImu() {
		imu = new IMU();
	}
}
