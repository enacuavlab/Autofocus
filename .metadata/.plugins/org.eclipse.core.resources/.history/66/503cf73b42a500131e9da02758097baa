/**
 * Classes used to display view of the current calibration
 */
package ellipsoide;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.logging.Logger;

import data.IVector;
import data.Vector;

/**
 * this class represent the sphere
 * 
 * @author GERVAIS florent
 * 
 */
public class Sphere {

	private static Logger logger = Logger.getLogger(Sphere.class.getName());

	/**
	 * The longitude of the sphere
	 */
	private double longitude;
	/**
	 * The latitude of the sphere
	 */
	private double latitude;
	/**
	 * The radius of the sphere
	 */
	private double radius;
	/**
	 * The center of the sphere
	 */
	private IVector<Double> center;
	/**
	 * List of the vectors
	 */
	private List<IVector<Double>> vectorList;
	/**
	 * List of the zones
	 */
	private List<Zone> zoneList;
	/**
	 * error of the previous center of the sphere tolerated
	 */
	private final double error = 50.0;

	/**
	 * The surface of the sphere used to calculate the density accross the
	 * sphere
	 */
	private double surfaceSphere;
	/**
	 * @param nbMaxPoints
	 *            number of points on the surface of the sphere to get the right
	 *            calibration
	 */
	private int nbPointsMax;
	/**
	 * Current zone
	 */
	private Zone zoneCourante;

	/**
	 * Create the Sphere and define the number of zones
	 * 
	 * @param longitude
	 *            this is the longitude step of 2PI rad
	 * @param latitude
	 *            this is the latitude step of PI rad
	 * @param nbPointsMax
	 *            the max number of points on the sphere
	 */
	public Sphere(double longitude, double latitude, int nbPointsMax) {
		this.nbPointsMax = nbPointsMax;
		this.longitude = longitude;
		this.latitude = latitude;
		center = new Vector(0, 0, 0);
		radius = 0;
		surfaceSphere = 0;
		vectorList = new ArrayList<IVector<Double>>();
		zoneList = new ArrayList<Zone>();
		createZone();
		ListIterator<Zone> j = zoneList.listIterator();
		zoneCourante = j.next();
	}

	public void clean() {
		center = new Vector(0, 0, 0);
		radius = 0;
		surfaceSphere = 0;
		vectorList = new ArrayList<IVector<Double>>();
		zoneList = new ArrayList<Zone>();
		createZone();
		ListIterator<Zone> j = zoneList.listIterator();
		zoneCourante = j.next();
	}

	/**
	 * Returns the zone in which the user is plotting
	 * 
	 */
	public Zone getCurrentZone() {
		return zoneCourante;
	}

	/**
	 * method called each time a new vector is added
	 * 
	 * @param radius
	 *            radius of the sphere
	 * @param newcenter
	 *            center of the sphere
	 * @param messageStackFirstVector
	 *            new vector added
	 * @param vectorToAdd
	 *            current vector
	 */
	public void update(final double radius, final IVector<Double> newcenter,
			final IVector<Double> vectorToAdd) {
		if (vectorToAdd.isCorrect()) {
			vectorList.add(vectorToAdd);
			if ((Math.abs(center.getX() - newcenter.getX()) > error)
					|| (Math.abs(center.getY() - newcenter.getY()) > error)
					|| (Math.abs(center.getZ() - newcenter.getZ()) > error)
					|| (Math.abs(this.radius - radius) > error)) {
				this.radius = radius;
				this.center = newcenter;
				this.surfaceSphere = 4 * Math.PI * Math.pow(radius, 2);
				updateAllZone();

			} else {
				update(vectorToAdd);
			}
		}
		updateCourant(vectorToAdd);
	}

	/**
	 * Allow to display the zone before checking if the vector is right
	 */
	public void updateCourant(IVector<Double> v) {
		updateVecCourant(v);
	}

	/**
	 * method implemented to get back the list of zones
	 * 
	 * @return return the ArrayList of zone
	 */
	public List<Zone> getZones() {
		return zoneList;
	}

	/**
	 * method that create all the zones
	 */
	private void createZone() {
		for (int i = 0; i < longitude; i++) {
			for (int j = 1; j < latitude - 1; j++) {
				zoneList.add(new Zone((Math.PI / latitude) * ((double) j)
						- Math.PI / 2.0, (Math.PI / latitude)
						* ((double) (j + 1)) - Math.PI / 2.0,
						((2.0 * Math.PI) / longitude) * ((double) i) - Math.PI,
						((2.0 * Math.PI) / longitude) * ((double) (i + 1))
								- Math.PI, nbPointsMax));
			}
		}
		zoneList.add(new Zone((Math.PI / latitude) * ((double) (latitude - 1))
				- Math.PI / 2.0, Math.PI / 2.0, -Math.PI, Math.PI, nbPointsMax));
		zoneList.add(new Zone(-Math.PI / 2.0, (Math.PI / latitude) - Math.PI
				/ 2.0, -Math.PI, Math.PI, nbPointsMax));
	}

	/**
	 * method that update all the zones with all vectors
	 */
	private void updateAllZone() {
		Zone ztemp;
		ListIterator<Zone> j = zoneList.listIterator();

		while (j.hasNext()) {
			ztemp = j.next();
			ztemp.maj_list_contour(radius);
			ztemp.calculateSurface(radius, surfaceSphere);
			ztemp.reset();
			ListIterator<IVector<Double>> i = vectorList.listIterator();
			while (i.hasNext()) {
				ztemp.containsVector(i.next(), center);
			}

		}
	}

	/**
	 * method that update the zones with only one vector
	 * 
	 * @param v
	 */
	protected void update(IVector<Double> v) {
		boolean b = false;
		ListIterator<Zone> j = zoneList.listIterator();
		Zone temp;
		while (!b && j.hasNext()) {
			temp = j.next();
			b = temp.containsVector(v, center);
		}
	}

	/**
	 * Update the current zone thanks to the last vector received
	 * 
	 * @param vcourant
	 *            last vector sent by the IMU
	 */
	protected void updateVecCourant(IVector<Double> vcourant) {
		boolean b = false;
		ListIterator<Zone> j = zoneList.listIterator();
		Zone temp;
		while (!b && j.hasNext()) {
			temp = j.next();
			if (b = temp.updateZoneCourante(vcourant, center)) {
				zoneCourante = temp;
			}
		}
	}

	/**
	 * Function for display
	 * 
	 * @return radius of the sphere
	 */
	public int getRayon() {
		return (int) radius;
	}

}