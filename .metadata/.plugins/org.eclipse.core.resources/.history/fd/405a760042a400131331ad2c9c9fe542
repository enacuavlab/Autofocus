/**Package grouping all classes used to filter data*/
package filtre;

import java.util.logging.Logger;

import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

import common.SlidingWindow;
import common.TypeCalibration;

import data.IVector;
import data.Vector;

/**
 * Mother class of all filter use to discriminates vector according to their
 * noise factor
 */

public class Filter {

	private static Logger logger = Logger.getLogger(Filter.class.getName());

	/**
	 * type de la calibration
	 * 
	 */
	private TypeCalibration type;
	/**
	 * Maximum and minimum on each directions used to update the sphere
	 * 
	 */
	private int maxX = 0;
	private int minX = 0;
	private int maxY = 0;
	private int minY = 0;
	private int maxZ = 0;
	private int minZ = 0;
	protected double rayon = 0;
	/** The center of the sphere */
	protected Vector center = new Vector(0, 0, 0);
	protected int nbCorrectVect = 0;
	/**
	 * The number of vector discarded used to reinitialize the progress bar
	 */
	protected int nbWrongVect = 0;

	/** The array used to store data, generates medium and standard deviation */
	// protected ArrayList<DescriptiveStatistics> variables;

	/** The size of the sliding window of the filter (default 40) */
	protected int windowSize;

	/**
	 * The sliding window of the filter. Contains the last <windowSize> messages
	 */
	protected SlidingWindow<IVector<Double>> messageStack;

	/** The noise threshold of the filter */
	private double noiseThreshold;

	private DescriptiveStatistics descStatX;
	private DescriptiveStatistics descStatY;
	private DescriptiveStatistics descStatZ;

	/**
	 * Creates a filter with fixed window size which filter the type of
	 * calibration given in parameter
	 * 
	 * @param windowSize
	 * @param t
	 */
	public Filter(int windowSize, TypeCalibration t) {
		this.noiseThreshold = 100; // start value
		this.type = t;
		this.windowSize = windowSize;
		messageStack = new SlidingWindow<IVector<Double>>(windowSize);
		// this.variables = new ArrayList<DescriptiveStatistics>();

		descStatX = new DescriptiveStatistics(windowSize);
		descStatY = new DescriptiveStatistics(windowSize);
		descStatZ = new DescriptiveStatistics(windowSize);
	}

	/**
	 * updates the window of the filter with the new vector given as argument
	 * not public use add instead
	 * 
	 * @param v
	 */
	// protected void updateCorrectness(IVector<Double> v) {
	// boolean validite = true;
	// for (DescriptiveStatistics e : variables) {
	// if (validite) {
	// // standard deviation = écart-type
	// validite = (e.getStandardDeviation() < noiseThreshold);
	// } else {
	// break;
	// }
	// }
	// if (validite != v.isCorrect()) {
	// if (validite)
	// v.setTrue();
	// else {
	// logger.info("Filter.updateCorrectness : false");
	// v.setFalse();
	// }
	// }
	// }

	/**
	 * add the vector building the correct window if not already built and
	 * updates the window
	 * 
	 * @param v
	 */
	public void add(final IVector<Double> v) {
		messageStack.add(v);

		// Ajout de la valeur X
		descStatX.addValue(v.getX());
		// Ajout de la valeur Y
		descStatY.addValue(v.getY());
		// Ajout de la valeur Z
		descStatZ.addValue(v.getZ());

		double maxAcceptedX = descStatX.getMean()
				+ descStatX.getStandardDeviation();
		double maxAcceptedY = descStatY.getMean()
				+ descStatY.getStandardDeviation();
		double maxAcceptedZ = descStatZ.getMean()
				+ descStatZ.getStandardDeviation();

		for (IVector<Double> vec : messageStack) {
			// updateCorrectness(vec);
			boolean validity = true;
			// Si le vecteur dépasse la zone autorisée sur au moins 1 axe, il
			// est non valide
			if (vec.getX() > maxAcceptedX || vec.getY() > maxAcceptedY
					|| vec.getZ() > maxAcceptedZ) {
				validity = false;
			}
			vec.setCorrectness(validity);
		}

		if (v.isCorrect()) {
			nbCorrectVect++;
		} else {
			nbWrongVect++;
		}

		rayon = (max(descStatX.getMax(), descStatY.getMax(), descStatZ.getMax()) + max(
				abs(descStatX.getMin()), abs(descStatY.getMin()),
				abs(descStatZ.getMin()))) / 2;
		center = new Vector(descStatX.getMean(), descStatY.getMean(),
				descStatZ.getMean());

		if (TypeCalibration.ACCELEROMETER.equals(this.type)) {
			noiseThreshold = (float) rayon / 100 * 2;
		} else {
			noiseThreshold = (float) rayon / 100 * 5;
		}
		// logger.info("Filter.add noiseThreshold=" + noiseThreshold);
		logger.info("nbCorrectVect=" + nbCorrectVect + " nbWrongVect="
				+ nbWrongVect);
	}

	private double abs(double m) {
		return Math.abs(m);
	}

	private double max(double x, double y, double z) {
		return Math.max(x, Math.max(y, z));
	}
}
